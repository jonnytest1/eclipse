package de.brandad.service_package_id_;

import java.io.StringWriter;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Templates;
import javax.xml.transform.Transformer;
import javax.xml.transform.stream.StreamResult;

import org.apache.commons.beanutils.PropertyUtils;
import org.jdom.Element;
import org.jdom.transform.JDOMSource;

import bas.core.utils.LogUtils;
import _form_class_qualified_;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

@Api(tags = {"private", "debug_info"})
@Path("/_restpath_")
public class _webservice_class_ {

	private static final LogUtils LOGGER = LogUtils.getLogger(_webservice_class_.class);

	private static Transformer transformer;

	public _webservice_class_() {
		//constructor
	}

	@Context
	private HttpSession session;

	@Context
	private HttpServletRequest servletRequest;

	@GET
	@Path("/data")
	@ApiOperation(value = "Gibt Data zurueck")
	@Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
	public Response getData() {
		_form_name_ form = (_form_name_) session.getAttribute("_form_identifier_");
		if(form==null){
			form = new _form_name_();
		}
		form.setInit(session, servletRequest, null);
		Map<String, Object> responseMap = new HashMap<>();
		try {
			_java_entry_point_
		
			String[] variables=new String[] {
					_json_entrypoint_
			};
			for(String key:variables){
				try {
					Object attribute=PropertyUtils.getProperty(form, key);
					if (attribute instanceof List && ((List<?>) attribute).get(0) instanceof Element) {
	
						if (transformer == null) {
							Map<?, ?> translets = (Map<?, ?>) servletRequest.getServletContext().getAttribute(de.brandad.struts13.action.ActionServlet.TRANSLET_CACHE);
							Templates translet = (Templates) translets.get("/page/style/transform.xsl");
							transformer = translet.newTransformer();
							transformer.setOutputProperty(OutputKeys.ENCODING, StandardCharsets.UTF_8.name());
							transformer.setOutputProperty(OutputKeys.METHOD, "html");
						}
	
						JDOMSource source = new org.jdom.transform.JDOMSource((List<?>) attribute);
						StringWriter writer = new StringWriter();
						StreamResult result = new StreamResult(writer);
						transformer.transform(source, result);
	
						attribute = writer.toString();
					}
					responseMap.put(key,attribute);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			
		} catch (Exception e) {
			LOGGER.error("error parsing form",e);
			return Response.status(400).build();
		}	
		return Response.ok(responseMap).build();
	}
	
	@POST
	@Path("/data")
	@ApiOperation(value = "speichert daten")
	@Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
	public Response postData() {
		return Response.ok(session.getAttribute("_form_identifier_")).build();
	}
}